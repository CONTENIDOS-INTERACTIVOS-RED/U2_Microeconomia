{"remainingRequest":"/home/runner/work/U2_Microeconomia/U2_Microeconomia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Microeconomia/U2_Microeconomia/src/views/curso/Tema1.vue?vue&type=template&id=596135eb&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Microeconomia/U2_Microeconomia/src/views/curso/Tema1.vue","mtime":1756438103960},{"path":"/home/runner/work/U2_Microeconomia/U2_Microeconomia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Microeconomia/U2_Microeconomia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Microeconomia/U2_Microeconomia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Microeconomia/U2_Microeconomia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Microeconomia/U2_Microeconomia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}